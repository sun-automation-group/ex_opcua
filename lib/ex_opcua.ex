defmodule ExOpcua do
  @moduledoc """
  Documentation for `ExOpcua`.
  """

  @doc """
  Library functions for OPC UA Lib.
  """
  alias ExOpcua.Session
  alias ExOpcua.Services.Read
  alias ExOpcua.DataTypes.NodeId
  alias ExOpcua.ParameterTypes.EndpointDescription

  def start_session(opts \\ []) do
    Session.start_session(opts)
  end

  def send(pid) do
    GenServer.cast(pid, :send)
  end

  def read(pid) do
    GenServer.call(pid, :read)
  end

  @spec read_all_attrs(List.t(), pid(), Atom.t()) :: map()
  def read_all_attrs(node_ids, pid, format \\ :pretty)

  def read_all_attrs([node | _rest] = nodeids, pid, format) when is_binary(node) do
    nodeids
    |> Enum.map(&NodeId.parse/1)
    |> read_all_attrs(pid, format)
  end

  def read_all_attrs(node_ids, pid, format) when is_list(node_ids) do
    # 1..27 come back in order
    # https://reference.opcfoundation.org/v104/Core/docs/Part6/A.1/
    GenServer.call(pid, {:read_all, node_ids})
    |> Read.format_output(node_ids, Read.attribute_ids(), format)
  end

  def read_all_attrs(node_id, pid, format) do
    read_all_attrs([node_id], pid, format)
  end

  @spec read_attrs(List.t(), pid(), list(Atom.t()), Atom.t()) :: map()
  def read_attrs(node_ids, pid, attrs \\ [:browse_name, :value], format \\ :pretty)

  def read_attrs([node | _rest] = nodeids, pid, attrs, format) when is_binary(node) do
    nodeids
    |> Enum.map(&NodeId.parse/1)
    |> read_attrs(pid, attrs, format)
  end

  def read_attrs(node_ids, pid, attrs, format) when is_list(node_ids) do
    GenServer.call(pid, {:read_attrs, node_ids, attrs})
    |> Read.format_output(node_ids, attrs, format)
  end

  def read_attrs(node_id, pid, attrs, format) do
    read_attrs([node_id], pid, attrs, format)
  end

  @spec discover_endpoints(binary(), integer(), binary()) :: [%EndpointDescription{}]
  def discover_endpoints(ip, port \\ 4840, url \\ nil) when is_binary(ip) do
    url = url || "opc.tcp://" <> ip <> ":" <> "#{port}"
    # initial values
    state = %Session.State{url: url, ip: ip, port: port}

    with {:ok, socket} <-
           :gen_tcp.connect(
             ip |> String.to_charlist(),
             port,
             [packet: :raw, mode: :binary, active: false, keepalive: true],
             10_000
           ),
         %Session.State{} = state <- %{state | socket: socket},
         %Session.State{} = state <- Session.initiate_hello(state),
         %Session.State{} = state <- Session.create_secure_connection(state),
         {%Session.State{} = state, endpoints} <- Session.get_endpoints(state),
         Session.close_secure_connection(state) do
      endpoints
    end
  end

  def endpoint() do
    %ExOpcua.ParameterTypes.EndpointDescription{
      message_sec_mode: :sign,
      sec_policy_uri: "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256",
      security_level: 1,
      server: %ExOpcua.ParameterTypes.ApplicationDescription{
        app_name: "SimulationServer@Kalebs-MacBook-Pro",
        app_type: :server,
        app_uri: "urn:Kalebs-MacBook-Pro.local:OPCUA:SimulationServer",
        discovery_profile_uri: nil,
        discovery_urls: ["opc.tcp://Kalebs-MacBook-Pro.local:53530/OPCUA/SimulationServer"],
        gateway_server_uri: nil,
        product_uri: "urn:prosysopc.com:OPCUA:SimulationServer"
      },
      server_cert: %{
        public_key:
          {:RSAPublicKey,
           17_613_116_168_005_741_559_508_673_914_679_911_427_152_126_075_015_720_884_747_549_322_715_312_277_771_805_797_246_804_608_358_133_295_364_536_958_573_402_497_218_733_093_038_152_155_852_039_778_223_294_464_307_773_355_937_317_681_021_460_052_294_644_640_439_570_330_219_521_047_950_558_571_564_401_119_785_350_013_899_486_602_675_276_714_539_219_702_336_473_312_348_831_077_166_603_806_121_401_989_067_184_409_819_454_792_343_971_931_110_008_813_654_511_443_863_286_262_701_178_634_311_212_942_466_996_381_029_141_413_688_861_764_289_232_673_917_446_735_068_497_836_269_568_722_076_137_198_235_518_366_416_701_366_986_863_857_930_617_424_754_275_421_711_493_983_881_680_996_508_284_001_271_531_990_280_778_716_858_554_997_441_653_730_398_211_999_069_310_113_576_894_613_285_930_509_050_283_983_314_963_045_475_957_932_709,
           65537},
        thumprint:
          <<91, 229, 69, 166, 39, 184, 138, 223, 99, 7, 145, 115, 112, 16, 179, 96, 51, 244, 13,
            236>>
      },
      transport_profile_uri: "http://opcfoundation.org/UA-Profile/Transport/uatcp-uasc-uabinary",
      url: "opc.tcp://Kalebs-MacBook-Pro.local:53530/OPCUA/SimulationServer",
      user_id_tokens: [
        %ExOpcua.ParameterTypes.UserTokenPolicy{
          issued_token_type: nil,
          issuer_endpoint_url: nil,
          policy_id: "username_basic128",
          security_policy_uri: "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15",
          user_token_type: :username
        },
        %ExOpcua.ParameterTypes.UserTokenPolicy{
          issued_token_type: nil,
          issuer_endpoint_url: nil,
          policy_id: "username_basic256",
          security_policy_uri: "http://opcfoundation.org/UA/SecurityPolicy#Basic256",
          user_token_type: :username
        },
        %ExOpcua.ParameterTypes.UserTokenPolicy{
          issued_token_type: nil,
          issuer_endpoint_url: nil,
          policy_id: "certificate_basic256",
          security_policy_uri: "http://opcfoundation.org/UA/SecurityPolicy#Basic256",
          user_token_type: :cert_x509
        },
        %ExOpcua.ParameterTypes.UserTokenPolicy{
          issued_token_type: nil,
          issuer_endpoint_url: nil,
          policy_id: "certificate_basic128",
          security_policy_uri: "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15",
          user_token_type: :cert_x509
        }
      ]
    }
  end

  def test_security() do
    client_private_key = File.read!("/Users/kaleb/test_priv.der")
    client_pub_cert = File.read!("/Users/kaleb/test_pub.der")

    server_public_key =
      <<0x30, 0x82, 0x04, 0x2F, 0x30, 0x82, 0x03, 0x17, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06,
        0x01, 0x79, 0xB0, 0x1F, 0x75, 0xFF, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7,
        0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x6D, 0x31, 0x2C, 0x30, 0x2A, 0x06, 0x03, 0x55,
        0x04, 0x03, 0x0C, 0x23, 0x53, 0x69, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53,
        0x65, 0x72, 0x76, 0x65, 0x72, 0x40, 0x4B, 0x61, 0x6C, 0x65, 0x62, 0x73, 0x2D, 0x4D, 0x61,
        0x63, 0x42, 0x6F, 0x6F, 0x6B, 0x2D, 0x50, 0x72, 0x6F, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03,
        0x55, 0x04, 0x0A, 0x0C, 0x0A, 0x50, 0x72, 0x6F, 0x73, 0x79, 0x73, 0x20, 0x4F, 0x50, 0x43,
        0x31, 0x28, 0x30, 0x26, 0x06, 0x0A, 0x09, 0x92, 0x26, 0x89, 0x93, 0xF2, 0x2C, 0x64, 0x01,
        0x19, 0x16, 0x18, 0x4B, 0x61, 0x6C, 0x65, 0x62, 0x73, 0x2D, 0x4D, 0x61, 0x63, 0x42, 0x6F,
        0x6F, 0x6B, 0x2D, 0x50, 0x72, 0x6F, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x30, 0x1E, 0x17,
        0x0D, 0x32, 0x31, 0x30, 0x35, 0x32, 0x37, 0x32, 0x32, 0x31, 0x38, 0x34, 0x32, 0x5A, 0x17,
        0x0D, 0x33, 0x31, 0x30, 0x35, 0x32, 0x35, 0x32, 0x33, 0x31, 0x38, 0x34, 0x32, 0x5A, 0x30,
        0x6D, 0x31, 0x2C, 0x30, 0x2A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x23, 0x53, 0x69, 0x6D,
        0x75, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x40, 0x4B,
        0x61, 0x6C, 0x65, 0x62, 0x73, 0x2D, 0x4D, 0x61, 0x63, 0x42, 0x6F, 0x6F, 0x6B, 0x2D, 0x50,
        0x72, 0x6F, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x0A, 0x50, 0x72,
        0x6F, 0x73, 0x79, 0x73, 0x20, 0x4F, 0x50, 0x43, 0x31, 0x28, 0x30, 0x26, 0x06, 0x0A, 0x09,
        0x92, 0x26, 0x89, 0x93, 0xF2, 0x2C, 0x64, 0x01, 0x19, 0x16, 0x18, 0x4B, 0x61, 0x6C, 0x65,
        0x62, 0x73, 0x2D, 0x4D, 0x61, 0x63, 0x42, 0x6F, 0x6F, 0x6B, 0x2D, 0x50, 0x72, 0x6F, 0x2E,
        0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86,
        0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30,
        0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0x8B, 0x85, 0xD3, 0x4F, 0x33, 0x3E, 0x93,
        0x55, 0x45, 0xFF, 0xC6, 0x46, 0x8B, 0x73, 0x1D, 0x4B, 0x6B, 0xE6, 0x49, 0xC2, 0xEA, 0xC9,
        0xBE, 0xDD, 0x1E, 0x8D, 0x48, 0x8F, 0xF1, 0x48, 0x2D, 0x26, 0x55, 0x84, 0x2F, 0x40, 0x05,
        0xAE, 0x75, 0x70, 0x7F, 0xC4, 0xAD, 0x15, 0x77, 0xE4, 0x49, 0x33, 0xBB, 0x92, 0xD8, 0xAB,
        0x41, 0x08, 0xE5, 0x57, 0xA2, 0x74, 0xC2, 0xE0, 0x4E, 0x67, 0x66, 0xE7, 0xEF, 0x6F, 0x60,
        0x10, 0xC0, 0xF0, 0x43, 0x72, 0x82, 0xD5, 0x62, 0xA4, 0xCA, 0x0F, 0x99, 0xC2, 0x9D, 0x0D,
        0x5D, 0xB8, 0x70, 0xC5, 0x66, 0xEA, 0xE8, 0x73, 0xE6, 0x35, 0xF9, 0x04, 0x99, 0x94, 0xEE,
        0xCC, 0x3B, 0x37, 0xC5, 0x29, 0x82, 0x93, 0x1F, 0x5B, 0x1F, 0x5F, 0x98, 0x73, 0xE1, 0x89,
        0xCD, 0xB5, 0x4D, 0x23, 0x7A, 0x0F, 0x79, 0x9B, 0xCF, 0x99, 0xBB, 0xB3, 0xEB, 0x02, 0x2B,
        0x47, 0x53, 0x8D, 0xB9, 0xD6, 0x1F, 0x9E, 0xA6, 0xFE, 0x0F, 0x07, 0x3B, 0x4D, 0x72, 0x56,
        0x12, 0xAF, 0xE2, 0xBC, 0x67, 0xB0, 0xD5, 0x99, 0xC6, 0x9F, 0x94, 0xD8, 0xA7, 0x6C, 0x61,
        0x07, 0x66, 0x43, 0x62, 0x49, 0x79, 0x9D, 0x33, 0xDF, 0xC2, 0xA5, 0x13, 0x68, 0x67, 0x58,
        0x6C, 0x4D, 0x93, 0x0D, 0xEB, 0xE0, 0x33, 0xBC, 0xEB, 0x55, 0xA2, 0x1F, 0x87, 0xDC, 0x09,
        0xFA, 0xD3, 0xEC, 0x37, 0xC3, 0xA1, 0xA3, 0x64, 0xCD, 0x23, 0x5D, 0x20, 0x41, 0x11, 0x4D,
        0xDA, 0x34, 0xC1, 0x6A, 0x93, 0xEA, 0xF3, 0x2B, 0xDD, 0x89, 0xCF, 0xA4, 0x45, 0xA3, 0x07,
        0x38, 0x8D, 0xAD, 0x66, 0xB6, 0x62, 0x83, 0xEE, 0x84, 0x3B, 0x76, 0x21, 0x71, 0x74, 0xA4,
        0x57, 0x54, 0xB1, 0x53, 0x8A, 0xF5, 0xFE, 0xB9, 0xDE, 0xF6, 0x6F, 0x53, 0x9F, 0xD8, 0x94,
        0x51, 0x33, 0x32, 0x90, 0xE2, 0xBD, 0x0D, 0x02, 0xA5, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3,
        0x81, 0xD4, 0x30, 0x81, 0xD1, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30,
        0x16, 0x80, 0x14, 0xAB, 0x61, 0x87, 0x7F, 0x95, 0x86, 0x6F, 0x32, 0x7C, 0xC9, 0x5B, 0xB5,
        0xC4, 0x1A, 0x4C, 0x87, 0x6C, 0x75, 0xEE, 0xDC, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E,
        0x04, 0x16, 0x04, 0x14, 0xAB, 0x61, 0x87, 0x7F, 0x95, 0x86, 0x6F, 0x32, 0x7C, 0xC9, 0x5B,
        0xB5, 0xC4, 0x1A, 0x4C, 0x87, 0x6C, 0x75, 0xEE, 0xDC, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D,
        0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03,
        0x02, 0x02, 0xF4, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06,
        0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05,
        0x05, 0x07, 0x03, 0x02, 0x30, 0x58, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x51, 0x30, 0x4F,
        0x86, 0x33, 0x75, 0x72, 0x6E, 0x3A, 0x4B, 0x61, 0x6C, 0x65, 0x62, 0x73, 0x2D, 0x4D, 0x61,
        0x63, 0x42, 0x6F, 0x6F, 0x6B, 0x2D, 0x50, 0x72, 0x6F, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x6C,
        0x3A, 0x4F, 0x50, 0x43, 0x55, 0x41, 0x3A, 0x53, 0x69, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69,
        0x6F, 0x6E, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0x18, 0x4B, 0x61, 0x6C, 0x65, 0x62,
        0x73, 0x2D, 0x4D, 0x61, 0x63, 0x42, 0x6F, 0x6F, 0x6B, 0x2D, 0x50, 0x72, 0x6F, 0x2E, 0x6C,
        0x6F, 0x63, 0x61, 0x6C, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
        0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x66, 0xA1, 0xF5, 0x39, 0x54, 0xF6,
        0x43, 0x04, 0x62, 0x43, 0x78, 0x4F, 0xE6, 0x71, 0x48, 0x54, 0xA9, 0x0B, 0x38, 0x1C, 0xFB,
        0x4D, 0x2A, 0x02, 0xB6, 0xBE, 0x7F, 0x39, 0xFC, 0x31, 0xDB, 0x0D, 0xFE, 0x84, 0x92, 0xC4,
        0xC6, 0x75, 0xE1, 0x17, 0xC5, 0x11, 0xB0, 0x55, 0xE8, 0x6F, 0x40, 0xC4, 0xBC, 0xE3, 0xC5,
        0xD9, 0xA3, 0x8A, 0x29, 0x8F, 0x43, 0x19, 0x77, 0xF5, 0xC6, 0xF8, 0x5C, 0xF7, 0xAE, 0x44,
        0x5A, 0x5F, 0xF7, 0x11, 0x99, 0xE3, 0xAA, 0x50, 0xF8, 0x75, 0xD8, 0xB6, 0xB1, 0x17, 0x80,
        0xC7, 0xFF, 0x60, 0x5D, 0xF6, 0xD6, 0xB6, 0xA3, 0x6E, 0xAF, 0xE3, 0x0E, 0x00, 0xA8, 0x03,
        0xB7, 0xC3, 0xC7, 0x2E, 0x02, 0xEB, 0xD8, 0x5C, 0x1F, 0xF9, 0xAE, 0xA3, 0x58, 0x27, 0x86,
        0xAC, 0xF4, 0x07, 0x5F, 0xF0, 0x18, 0x35, 0x89, 0x9C, 0xA7, 0x33, 0xD7, 0xE2, 0x44, 0x6B,
        0x1A, 0x26, 0xC6, 0xC7, 0x0D, 0x6E, 0x60, 0xFD, 0x66, 0xE2, 0x0E, 0x0E, 0x4E, 0x88, 0xE6,
        0xA5, 0x39, 0x93, 0xD0, 0xE9, 0x6E, 0x59, 0xB9, 0xBE, 0xF9, 0xCE, 0x5B, 0xA8, 0x52, 0xF0,
        0x6A, 0xA3, 0x7B, 0xF3, 0x1A, 0xE6, 0x64, 0xC2, 0x81, 0xF7, 0xB5, 0xA2, 0x52, 0xD5, 0x66,
        0xEF, 0x52, 0xD1, 0xF5, 0x5D, 0x1E, 0x8A, 0x7C, 0xBA, 0x9D, 0xB3, 0x5E, 0xA1, 0x35, 0xBC,
        0x0A, 0xBA, 0x0F, 0xFE, 0xE3, 0x1C, 0xF9, 0xD2, 0x11, 0x4A, 0x3C, 0x23, 0xD2, 0x9B, 0x9F,
        0xD6, 0x29, 0x29, 0xE9, 0x8A, 0xE7, 0xFB, 0xE6, 0x79, 0xC0, 0xE9, 0xEF, 0x4F, 0xEF, 0xCE,
        0x3C, 0xE9, 0xD7, 0x45, 0x07, 0x78, 0x80, 0x17, 0x84, 0x88, 0xE3, 0x2D, 0x4D, 0x60, 0x5C,
        0x52, 0xC3, 0xC7, 0x7D, 0x40, 0xCD, 0xE8, 0x2C, 0x5F, 0xB1, 0x90, 0x03, 0x61, 0x39, 0x5D,
        0x7F, 0xB9, 0xB6, 0x79, 0x74, 0x69, 0x67, 0xC1, 0x2E, 0xB7>>

    ExOpcua.SecurityProfile.new(
      :sign_encrypt,
      :basic256_Sha256,
      client_private_key,
      client_pub_cert,
      server_public_key
    )
  end
end
